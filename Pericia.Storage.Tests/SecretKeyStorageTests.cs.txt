// Rename this file to SecretKeyStorageTests.cs
// Test other provider with your secret api keys

using Pericia.Storage.AwsS3;
using Pericia.Storage.AzureBlobs;
using Pericia.Storage.Minio;
using Pericia.Storage.OpenStack;
using System.Threading.Tasks;
using Xunit;

namespace Pericia.Storage.Tests
{
	public class SecretKeyStorageTests : StorageTests
	{

		[Fact]
		public Task TestAzureBlobs()
		{
			var options = new AzureBlobsStorageOptions
			{
				ConnectionString = ""
			};
			var fileStorage = new AzureBlobsStorageContainer(options, "TestContainer");

			return TestStorage(fileStorage);
		}

		[Fact]
		public Task TestAwsS3()
		{
			var options = new S3StorageOptions
			{
				AccessKey = "",
				SecretKey = "",
				ServiceUrl = ""
			};
			var fileStorage = new S3StorageContainer(options, "TestContainer");

			return TestStorage(fileStorage);
		}

		[Fact]
		public Task TestMinio()
		{
			{
				var options = new MinioStorageOptions
				{
					AccessKey = "",
					SecretKey = "",
					Endpoint = "",
					Region = null
				};
				var fileStorage = new MinioStorageContainer(options, "testcontainer");

				return TestStorage(fileStorage);
			}
		}

		[Fact]
		public Task TestOpenStack()
		{
			var options = new OpenStackStorageOptions
			{
				ApiEndpoint = "",
				AuthEndpoint = "",
				TenantName = "",
				UserId = "",
				Password = "",
			};
			var fileStorage = new OpenStackStorageContainer(options, "TestContainer");

			return TestStorage(fileStorage);
		}
	}
}
